/*
 * Copyright 2019-Present Sonatype Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import expect, { ossIndexServerResults } from '../Tests/TestHelper';
import { filterVulnerabilities } from './VulnerabilityExcluder';
import mock from 'mock-fs';

const jsonWithOnlyOneMatch = `{
  "ignore": [ 
    {
      "id": "test_id"
    }
  ]
}`;

const jsonWithReviewDate = `{
  "ignore": [ 
    {
      "id": "test_id",
      "reviewDate": "2000-01-01T00:00:00.000Z"
    },
    {
      "id": "test_id2",
      "reviewDate": "2099-01-01T00:00:00.000Z"
    }
  ]
}`;

const json = `{
  "ignore": [ 
    {
      "id": "test_id"
    },
    {
      "id": "test_id2"
    }
  ]
}`;

const jsonWithNonApplicableId = `{
  "ignore": [ {
    "id": "qwepquepoqwe"
    }
  ]
}`;

const nonSensicalJson = `{
  "ignore": [ {
  ]
}`;

describe('VulnerabilityExcluder', () => {
  it('should filter vulnerabilities given a valid auditjs.json', async () => {
    mock({
      '/nonsensical': {
        'auditjs.json': json,
      },
    });
    const results = await filterVulnerabilities(ossIndexServerResults, '/nonsensical/auditjs.json');
    expect(results[1].vulnerabilities?.length).to.equal(0);
    mock.restore();
  });

  it('should filter some vulnerabilities given a valid auditjs.json', async () => {
    mock({
      '/nonsensical': {
        'auditjs.json': jsonWithOnlyOneMatch,
      },
    });
    const results = await filterVulnerabilities(ossIndexServerResults, '/nonsensical/auditjs.json');
    expect(results[1].vulnerabilities?.length).to.equal(1);
    mock.restore();
  });

  it('should not filter vulnerabilities given a valid auditjs.json with an id that does not match', async () => {
    mock({
      '/nonsensical': {
        'auditjs.json': jsonWithNonApplicableId,
      },
    });
    const results = await filterVulnerabilities(ossIndexServerResults, '/nonsensical/auditjs.json');
    expect(results[1].vulnerabilities?.length).to.equal(2);
    mock.restore();
  });

  it('should not filter vulnerabilities given an id that matches but the reviewDate has passed', async () => {
    mock({
      '/nonsensical': {
        'auditjs.json': jsonWithReviewDate,
      },
    });
    const results = await filterVulnerabilities(ossIndexServerResults, '/nonsensical/auditjs.json');
    expect(results[1].vulnerabilities?.length).to.equal(1);
    mock.restore();
  });

  it('should just return the original results and not barf all over itself if the auditjs.json file is malformed', async () => {
    mock({
      '/nonsensical': {
        'auditjs.json': nonSensicalJson,
      },
    });

    expect(filterVulnerabilities(ossIndexServerResults, '/nonsensical/auditjs.json')).to.eventually.be.rejected;
    mock.restore();
  });

  it('should return original results if no auditjs.json exists ', async () => {
    mock({ '/nonsensical': {} });

    const results = await filterVulnerabilities(ossIndexServerResults, '/nonsensical/auditjs.json');
    expect(results).to.deep.equal(ossIndexServerResults);
    mock.restore();
  });
});
